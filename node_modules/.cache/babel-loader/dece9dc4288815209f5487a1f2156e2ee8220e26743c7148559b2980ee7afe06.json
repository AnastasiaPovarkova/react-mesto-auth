{"ast":null,"code":"export const BASE_URL = \"https://auth.nomoreparties.co\";\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => {\n    return response.json();\n  }).then(res => {\n    return res;\n  });\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => response.json()).then(res => {\n    if (res.token) {\n      localStorage.setItem(\"jwt\", res.token);\n    }\n    return res;\n  });\n};\nexport const checkToken = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(res => res.json()).then(data => data);\n};","map":{"version":3,"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","response","json","res","authorize","token","localStorage","setItem","checkToken","Authorization","data"],"sources":["/Users/nastya/Desktop/Yandex_Practicum/react-mesto-auth/src/auth.js"],"sourcesContent":["export const BASE_URL = \"https://auth.nomoreparties.co\";\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ password, email }),\n  })\n    .then((response) => {\n      return response.json();\n    })\n    .then((res) => {\n      return res;\n    });\n};\n\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ password, email }),\n  })\n    .then((response) => response.json())\n    .then((res) => {\n      if (res.token) {\n        localStorage.setItem(\"jwt\", res.token);\n      }\n      return res;\n    });\n};\n\nexport const checkToken = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  })\n    .then((res) => res.json())\n    .then((data) => data);\n};\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAEvD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAQ,EAAE;IACjCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAAEC,QAAQ,IAAK;IAClB,OAAOA,QAAQ,CAACC,IAAI,EAAE;EACxB,CAAC,CAAC,CACDF,IAAI,CAAEG,GAAG,IAAK;IACb,OAAOA,GAAG;EACZ,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGA,CAACX,QAAQ,EAAED,KAAK,KAAK;EAC5C,OAAOE,KAAK,CAAE,GAAEJ,QAAS,SAAQ,EAAE;IACjCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,GAAG,IAAK;IACb,IAAIA,GAAG,CAACE,KAAK,EAAE;MACbC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEJ,GAAG,CAACE,KAAK,CAAC;IACxC;IACA,OAAOF,GAAG;EACZ,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMK,UAAU,GAAIH,KAAK,IAAK;EACnC,OAAOX,KAAK,CAAE,GAAEJ,QAAS,WAAU,EAAE;IACnCK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASJ,KAAM;IACjC;EACF,CAAC,CAAC,CACCL,IAAI,CAAEG,GAAG,IAAKA,GAAG,CAACD,IAAI,EAAE,CAAC,CACzBF,IAAI,CAAEU,IAAI,IAAKA,IAAI,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}