{"ast":null,"code":"class Api {\n  constructor(options) {\n    this.getUserInfo = () => {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    };\n    this.getInitialCards = () => {\n      return fetch(`${this._baseUrl}/cards`, {\n        method: 'GET',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    };\n    this.addNewCard = data => {\n      return fetch(`${this._baseUrl}/cards`, {\n        method: 'POST',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.name,\n          link: data.link\n        })\n      }).then(res => this._getResponseData(res));\n    };\n    this.deleteCard = cardId => {\n      return fetch(`${this._baseUrl}/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    };\n    this.likeCard = cardId => {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    };\n    this.unlikeCard = cardId => {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    };\n    this.editAvatar = data => {\n      return fetch(`${this._baseUrl}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({\n          avatar: data.avatar\n        })\n      }).then(res => this._getResponseData(res));\n    };\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  changeUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._getResponseData(res));\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-59',\n  headers: {\n    authorization: 'd2287a93-13da-4c7a-9dc9-db17e7519537',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","getUserInfo","fetch","_baseUrl","method","headers","_headers","then","res","_getResponseData","getInitialCards","addNewCard","data","body","JSON","stringify","name","link","deleteCard","cardId","likeCard","unlikeCard","editAvatar","avatar","baseUrl","ok","Promise","reject","status","json","changeUserInfo","about","api","authorization"],"sources":["/Users/nastya/Desktop/Yandex_Practicum/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n    constructor(options) {\n      this._baseUrl = options.baseUrl;\n      this._headers = options.headers;\n    }\n  \n    _getResponseData(res) {\n      if (!res.ok) {\n          return Promise.reject(`Ошибка: ${res.status}`);\n      }\n      return res.json();\n    }\n    \n    getUserInfo = () => {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'GET',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res))\n    }\n    \n    getInitialCards = () => {\n      return fetch(`${this._baseUrl}/cards`, {\n        method: 'GET',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res))\n    }      \n      \n    changeUserInfo(data) {\n      return fetch(`${this._baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.name,\n          about: data.about\n        })\n      })\n        .then(res => this._getResponseData(res))\n    }\n  \n    addNewCard = (data) => {\n      return fetch(`${this._baseUrl}/cards`, {\n        method: 'POST',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: data.name,\n          link: data.link\n        })\n      })\n        .then(res => this._getResponseData(res))\n    }\n  \n    deleteCard = (cardId) => {\n      return fetch(`${this._baseUrl}/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res))\n    }\n  \n    likeCard = (cardId) => {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res))\n    }\n  \n    unlikeCard = (cardId) => {\n      return fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res))\n    }\n  \n    editAvatar = (data) => {\n      return fetch(`${this._baseUrl}/users/me/avatar`, {\n        method: 'PATCH',\n        headers: this._headers, \n        body: JSON.stringify({\n          avatar: data.avatar\n        })\n      })\n        .then(res => this._getResponseData(res))\n    }\n  }\n\n  const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-59',\n    headers: {\n      authorization: 'd2287a93-13da-4c7a-9dc9-db17e7519537',\n      'Content-Type': 'application/json'\n    }\n  }); \n\n  export default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}